##     ----------------------------------------------------------------------
##    |  string manipulation utilities
##
#macro( mixedcase $name )$name.substring(0,1).toUpperCase()$name.substring(1)#end
#macro( lowercase $name )$name.toLowerCase()#end
#macro( uppercase $name )$name.toUpperCase()#end
#macro( comment   $indent $name )#if($name.getComment().lenght > 0)
${indent}* Comment from ontology: ${name.getComment()}
${indent}*#end  
#end  
##  production 
##macro( debug $text )$!{nix}#end
## debug
#macro( debug $text )	 *
	 * [Generated from RDFReactor template rule #${text}] 
#end
#set( $UNDEFINED = -1 )
##     -----------------------------------------------------------------------
##    |  package declaration and comment
##
/**
 * generated by http://RDFReactor.semweb4j.org ($generatorVersion) JavaScript extension on $now
 */

##     -----------------------------------------------------------------------
##    |  class comment
##
/**
#comment(" " $class)
#if ($class.properties.size() > 0)
 * This class manages access to these properties:
 * <ul>
#foreach( $prop in $class.properties )
 *   <li> #mixedcase( $prop.name ) </li>
#end##foreach
 * </ul>
#end## if ($class.properties.size() > 0)
 */
##     -----------------------------------------------------------------------
##    |  class declaration
##
##public class $class.name extends $class.superclass {
$class.name = function(rdf) {
    ${class.superclass}.call(this, rdf);
   
##     -----------------------------------------------------------------------
##    |  URI constants for properties
##
    /** $class.mappedTo */

#foreach( $prop in $class.properties )
    /** $prop.mappedTo */
#end## foreach( $prop in $class.properties )

##     -----------------------------------------------------------------------
##    |  constructor
##
    var queryObject = function(rdf, from, predicate, to) {
        return rdf.where(from + ' ' + predicate + ' ' + to);
    }
 
#foreach( $prop in $class.properties )
#set( $multirange = ($prop.types.size() != 1) )
#set( $classname = $prop.getFirstType() )
#set( $isString = $prop.isStringFirstType() )
    var $prop.name = new Array();
    queryObject(rdf, "?${class.name}", "foaf:$prop.name", "?$prop.name")
        .each(function() {
            ${prop.name}.push(new ${classname}(rdf
                .where("$prop.name a foaf:$prop.name")
                .filter("authority", this.${prop.name}.value.authority))); 
        });
    this.$prop.name = $prop.name;
    
##parse("get.vm")
##parse("add.vm")
##parse("set.vm")
##parse("remove.vm")
##parse("removeall.vm")
#end## #foreach( $prop in $class.properties )

    this.equals = function(o) {
        if(!(o instanceof ${class.name})) {
            return false;
        }
        if(${class.superclass}.prototype.equals.call(this)) {
            return false;
        }
#foreach( $prop in $class.properties )
#set( $multirange = ($prop.types.size() != 1) )
#set( $classname = $prop.getFirstType() )
#set( $isString = $prop.isStringFirstType() )
#if($multirange)
        if(this.${prop.name}.length == o.${prop.name}.length)
            for(var i = 0; i < this.${prop.name}.length; i++) {
#if($isString)
                if(this.${prop.name} != o.${prop.name}) {
                    return false;
                }
#end
#if(!$isString)
                if(!this.${prop.name}.equals(o.${prop.name})) {
                    return false;
                }
#end
            }
        }
#end    
#end
        return true;
    }
    
}
${class.name}.prototype = new ${class.superclass}();

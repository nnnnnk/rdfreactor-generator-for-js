/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) JavaScript extension on 5/29/11 6:28 PM
 */

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Basednear </li>
 *   <li> Currentproject </li>
 *   <li> FamilyName </li>
 *   <li> Familyname </li>
 *   <li> FirstName </li>
 *   <li> Geekcode </li>
 *   <li> Image </li>
 *   <li> Knows </li>
 *   <li> LastName </li>
 *   <li> MyersBriggs </li>
 *   <li> Pastproject </li>
 *   <li> Plan </li>
 *   <li> Publications </li>
 *   <li> SchoolHomepage </li>
 *   <li> Surname </li>
 *   <li> Workinfohomepage </li>
 *   <li> Workplacehomepage </li>
 *   <li> Comment </li>
 *   <li> Label </li>
 *   <li> Member </li>
 *   <li> Type </li>
 * </ul>
 */
Person = function(rdf) {
    Agent.call(this, rdf);
   
    /** http://xmlns.com/foaf/0.1/Person */

    /** http://xmlns.com/foaf/0.1/based_near */
    /** http://xmlns.com/foaf/0.1/currentProject */
    /** http://xmlns.com/foaf/0.1/familyName */
    /** http://xmlns.com/foaf/0.1/family_name */
    /** http://xmlns.com/foaf/0.1/firstName */
    /** http://xmlns.com/foaf/0.1/geekcode */
    /** http://xmlns.com/foaf/0.1/img */
    /** http://xmlns.com/foaf/0.1/knows */
    /** http://xmlns.com/foaf/0.1/lastName */
    /** http://xmlns.com/foaf/0.1/myersBriggs */
    /** http://xmlns.com/foaf/0.1/pastProject */
    /** http://xmlns.com/foaf/0.1/plan */
    /** http://xmlns.com/foaf/0.1/publications */
    /** http://xmlns.com/foaf/0.1/schoolHomepage */
    /** http://xmlns.com/foaf/0.1/surname */
    /** http://xmlns.com/foaf/0.1/workInfoHomepage */
    /** http://xmlns.com/foaf/0.1/workplaceHomepage */
    /** http://www.w3.org/2000/01/rdf-schema#comment */
    /** http://www.w3.org/2000/01/rdf-schema#label */
    /** http://www.w3.org/2000/01/rdf-schema#member */
    /** http://www.w3.org/1999/02/22-rdf-syntax-ns#type */

    var queryObject = function(rdf, from, predicate, to) {
        return rdf.where(from + ' ' + predicate + ' ' + to);
    }
 
    var Basednear = new Array();
    queryObject(rdf, "?Person", "foaf:Basednear", "?Basednear")
        .each(function() {
            Basednear.push(new SpatialThing(rdf
                .where("Basednear a foaf:Basednear")
                .filter("authority", this.Basednear.value.authority))); 
        });
    this.Basednear = Basednear;
    
    var Currentproject = new Array();
    queryObject(rdf, "?Person", "foaf:Currentproject", "?Currentproject")
        .each(function() {
            Currentproject.push(new org.ontoware.rdfreactor.schema.owl.Thing(rdf
                .where("Currentproject a foaf:Currentproject")
                .filter("authority", this.Currentproject.value.authority))); 
        });
    this.Currentproject = Currentproject;
    
    var FamilyName = new Array();
    queryObject(rdf, "?Person", "foaf:FamilyName", "?FamilyName")
        .each(function() {
            FamilyName.push(new String(rdf
                .where("FamilyName a foaf:FamilyName")
                .filter("authority", this.FamilyName.value.authority))); 
        });
    this.FamilyName = FamilyName;
    
    var Familyname = new Array();
    queryObject(rdf, "?Person", "foaf:Familyname", "?Familyname")
        .each(function() {
            Familyname.push(new String(rdf
                .where("Familyname a foaf:Familyname")
                .filter("authority", this.Familyname.value.authority))); 
        });
    this.Familyname = Familyname;
    
    var FirstName = new Array();
    queryObject(rdf, "?Person", "foaf:FirstName", "?FirstName")
        .each(function() {
            FirstName.push(new String(rdf
                .where("FirstName a foaf:FirstName")
                .filter("authority", this.FirstName.value.authority))); 
        });
    this.FirstName = FirstName;
    
    var Geekcode = new Array();
    queryObject(rdf, "?Person", "foaf:Geekcode", "?Geekcode")
        .each(function() {
            Geekcode.push(new String(rdf
                .where("Geekcode a foaf:Geekcode")
                .filter("authority", this.Geekcode.value.authority))); 
        });
    this.Geekcode = Geekcode;
    
    var Image = new Array();
    queryObject(rdf, "?Person", "foaf:Image", "?Image")
        .each(function() {
            Image.push(new Image(rdf
                .where("Image a foaf:Image")
                .filter("authority", this.Image.value.authority))); 
        });
    this.Image = Image;
    
    var Knows = new Array();
    queryObject(rdf, "?Person", "foaf:Knows", "?Knows")
        .each(function() {
            Knows.push(new Person(rdf
                .where("Knows a foaf:Knows")
                .filter("authority", this.Knows.value.authority))); 
        });
    this.Knows = Knows;
    
    var LastName = new Array();
    queryObject(rdf, "?Person", "foaf:LastName", "?LastName")
        .each(function() {
            LastName.push(new String(rdf
                .where("LastName a foaf:LastName")
                .filter("authority", this.LastName.value.authority))); 
        });
    this.LastName = LastName;
    
    var MyersBriggs = new Array();
    queryObject(rdf, "?Person", "foaf:MyersBriggs", "?MyersBriggs")
        .each(function() {
            MyersBriggs.push(new String(rdf
                .where("MyersBriggs a foaf:MyersBriggs")
                .filter("authority", this.MyersBriggs.value.authority))); 
        });
    this.MyersBriggs = MyersBriggs;
    
    var Pastproject = new Array();
    queryObject(rdf, "?Person", "foaf:Pastproject", "?Pastproject")
        .each(function() {
            Pastproject.push(new org.ontoware.rdfreactor.schema.owl.Thing(rdf
                .where("Pastproject a foaf:Pastproject")
                .filter("authority", this.Pastproject.value.authority))); 
        });
    this.Pastproject = Pastproject;
    
    var Plan = new Array();
    queryObject(rdf, "?Person", "foaf:Plan", "?Plan")
        .each(function() {
            Plan.push(new String(rdf
                .where("Plan a foaf:Plan")
                .filter("authority", this.Plan.value.authority))); 
        });
    this.Plan = Plan;
    
    var Publications = new Array();
    queryObject(rdf, "?Person", "foaf:Publications", "?Publications")
        .each(function() {
            Publications.push(new Document(rdf
                .where("Publications a foaf:Publications")
                .filter("authority", this.Publications.value.authority))); 
        });
    this.Publications = Publications;
    
    var SchoolHomepage = new Array();
    queryObject(rdf, "?Person", "foaf:SchoolHomepage", "?SchoolHomepage")
        .each(function() {
            SchoolHomepage.push(new Document(rdf
                .where("SchoolHomepage a foaf:SchoolHomepage")
                .filter("authority", this.SchoolHomepage.value.authority))); 
        });
    this.SchoolHomepage = SchoolHomepage;
    
    var Surname = new Array();
    queryObject(rdf, "?Person", "foaf:Surname", "?Surname")
        .each(function() {
            Surname.push(new String(rdf
                .where("Surname a foaf:Surname")
                .filter("authority", this.Surname.value.authority))); 
        });
    this.Surname = Surname;
    
    var Workinfohomepage = new Array();
    queryObject(rdf, "?Person", "foaf:Workinfohomepage", "?Workinfohomepage")
        .each(function() {
            Workinfohomepage.push(new Document(rdf
                .where("Workinfohomepage a foaf:Workinfohomepage")
                .filter("authority", this.Workinfohomepage.value.authority))); 
        });
    this.Workinfohomepage = Workinfohomepage;
    
    var Workplacehomepage = new Array();
    queryObject(rdf, "?Person", "foaf:Workplacehomepage", "?Workplacehomepage")
        .each(function() {
            Workplacehomepage.push(new Document(rdf
                .where("Workplacehomepage a foaf:Workplacehomepage")
                .filter("authority", this.Workplacehomepage.value.authority))); 
        });
    this.Workplacehomepage = Workplacehomepage;
    
    var comment = new Array();
    queryObject(rdf, "?Person", "foaf:comment", "?comment")
        .each(function() {
            comment.push(new Document(rdf
                .where("comment a foaf:comment")
                .filter("authority", this.comment.value.authority))); 
        });
    this.comment = comment;
    
    var label = new Array();
    queryObject(rdf, "?Person", "foaf:label", "?label")
        .each(function() {
            label.push(new Document(rdf
                .where("label a foaf:label")
                .filter("authority", this.label.value.authority))); 
        });
    this.label = label;
    
    var member = new Array();
    queryObject(rdf, "?Person", "foaf:member", "?member")
        .each(function() {
            member.push(new Document(rdf
                .where("member a foaf:member")
                .filter("authority", this.member.value.authority))); 
        });
    this.member = member;
    
    var type = new Array();
    queryObject(rdf, "?Person", "foaf:type", "?type")
        .each(function() {
            type.push(new Document(rdf
                .where("type a foaf:type")
                .filter("authority", this.type.value.authority))); 
        });
    this.type = type;
    

    this.equals = function(o) {
        if(!(o instanceof Person)) {
            return false;
        }
        if(Agent.prototype.equals.call(this)) {
            return false;
        }
        if(this.comment.length == o.comment.length)
            for(var i = 0; i < this.comment.length; i++) {
                if(!this.comment.equals(o.comment)) {
                    return false;
                }
            }
        }
        if(this.label.length == o.label.length)
            for(var i = 0; i < this.label.length; i++) {
                if(!this.label.equals(o.label)) {
                    return false;
                }
            }
        }
        if(this.member.length == o.member.length)
            for(var i = 0; i < this.member.length; i++) {
                if(!this.member.equals(o.member)) {
                    return false;
                }
            }
        }
        if(this.type.length == o.type.length)
            for(var i = 0; i < this.type.length; i++) {
                if(!this.type.equals(o.type)) {
                    return false;
                }
            }
        }
        return true;
    }
    
}
Person.prototype = new Agent();

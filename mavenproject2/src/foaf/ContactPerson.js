/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) JavaScript extension on 5/29/11 6:28 PM
 */

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Comment </li>
 *   <li> Label </li>
 *   <li> Member </li>
 *   <li> Type </li>
 * </ul>
 */
ContactPerson = function(rdf) {
    Thing.call(this, rdf);
   
    /** http://www.w3.org/2000/10/swap/pim/contact#Person */

    /** http://www.w3.org/2000/01/rdf-schema#comment */
    /** http://www.w3.org/2000/01/rdf-schema#label */
    /** http://www.w3.org/2000/01/rdf-schema#member */
    /** http://www.w3.org/1999/02/22-rdf-syntax-ns#type */

    var queryObject = function(rdf, from, predicate, to) {
        return rdf.where(from + ' ' + predicate + ' ' + to);
    }
 
    var comment = new Array();
    queryObject(rdf, "?ContactPerson", "foaf:comment", "?comment")
        .each(function() {
            comment.push(new ${classname}(rdf
                .where("comment a foaf:comment")
                .filter("authority", this.comment.value.authority))); 
        });
    this.comment = comment;
    
    var label = new Array();
    queryObject(rdf, "?ContactPerson", "foaf:label", "?label")
        .each(function() {
            label.push(new ${classname}(rdf
                .where("label a foaf:label")
                .filter("authority", this.label.value.authority))); 
        });
    this.label = label;
    
    var member = new Array();
    queryObject(rdf, "?ContactPerson", "foaf:member", "?member")
        .each(function() {
            member.push(new ${classname}(rdf
                .where("member a foaf:member")
                .filter("authority", this.member.value.authority))); 
        });
    this.member = member;
    
    var type = new Array();
    queryObject(rdf, "?ContactPerson", "foaf:type", "?type")
        .each(function() {
            type.push(new ${classname}(rdf
                .where("type a foaf:type")
                .filter("authority", this.type.value.authority))); 
        });
    this.type = type;
    

    this.equals = function(o) {
        if(!(o instanceof ContactPerson)) {
            return false;
        }
        if(Thing.prototype.equals.call(this)) {
            return false;
        }
        if(this.comment.length == o.comment.length)
            for(var i = 0; i < this.comment.length; i++) {
                if(!this.comment.equals(o.comment)) {
                    return false;
                }
            }
        }
        if(this.label.length == o.label.length)
            for(var i = 0; i < this.label.length; i++) {
                if(!this.label.equals(o.label)) {
                    return false;
                }
            }
        }
        if(this.member.length == o.member.length)
            for(var i = 0; i < this.member.length; i++) {
                if(!this.member.equals(o.member)) {
                    return false;
                }
            }
        }
        if(this.type.length == o.type.length)
            for(var i = 0; i < this.type.length; i++) {
                if(!this.type.equals(o.type)) {
                    return false;
                }
            }
        }
        return true;
    }
    
}
ContactPerson.prototype = new Thing();
